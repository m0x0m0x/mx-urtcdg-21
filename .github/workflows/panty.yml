name: Build and Release Rust Binary from rel/t1

# Trigger on push events to branch w1 and specific directory
on:
  push:
    branches:
      - 'w1'  # Your specific branch
    paths:
      - 'rel/t1/**'       # Watch for changes in your specific directory
      - 'rel/t1/Cargo.toml'
      - 'rel/t1/Cargo.lock'
      - 'rel/t1/src/**'

# Environment variables
env:
  CARGO_TERM_COLOR: always
  PROJECT_DIR: 'rel/t1'  # Your specific directory
  BINARY_NAME: 'SmellPanty'  # Replace with your actual binary name
  RELEASE_TAG_PREFIX: 'v'

# Permission setting for GitHub Token
permissions:
  contents: write

jobs:
  # Test job - runs tests in the specific directory
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Run tests
        run: cargo test --verbose
        working-directory: ${{ env.PROJECT_DIR }}

  # Build and release job
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: test  # Wait for tests to pass first
    if: github.ref == 'refs/heads/w1' && success()
    
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Step 2: Verify directory structure
    - name: Verify project directory
      run: |
        echo "Current directory: $(pwd)"
        echo "Listing project directory:"
        ls -la ${{ env.PROJECT_DIR }}/
        echo "Checking for Cargo.toml:"
        ls -la ${{ env.PROJECT_DIR }}/Cargo.toml || echo "Cargo.toml not found!"

    # Step 3: Set up Rust toolchain
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        targets: x86_64-unknown-linux-musl

    # Step 4: Get version from Cargo.toml or use timestamp
    - name: Determine release tag
      id: get_tag
      run: |
        cd ${{ env.PROJECT_DIR }}
        if [ -f "Cargo.toml" ]; then
          VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d '"' -f 2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG=${RELEASE_TAG_PREFIX}${VERSION}-$(date +%Y%m%d%H%M)" >> $GITHUB_OUTPUT
        else
          echo "TAG=${RELEASE_TAG_PREFIX}$(date +%Y.%m.%d-%H%M)" >> $GITHUB_OUTPUT
        fi
        echo "Using tag: $TAG"

    # Step 5: Build release binary
    - name: Build release binary
      run: |
        cd ${{ env.PROJECT_DIR }}
        cargo build --release --target x86_64-unknown-linux-musl --locked
        # Find the actual binary name if not specified
        BINARY_NAME=$(grep '^name' Cargo.toml | head -1 | cut -d '"' -f 2)
        strip target/x86_64-unknown-linux-musl/release/$BINARY_NAME
        echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

    # Step 6: Create GitHub Release
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_tag.outputs.TAG }}
        name: Release ${{ steps.get_tag.outputs.TAG }}
        body: |
          Automated release from directory: ${{ env.PROJECT_DIR }}
          
          **Build Details:**
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref }}
          - Binary: ${{ env.BINARY_NAME }}
          - Target: x86_64-unknown-linux-musl
          - Timestamp: $(date -u)
        draft: false
        prerelease: false

    # Step 7: Upload binary asset
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.PROJECT_DIR }}/target/x86_64-unknown-linux-musl/release/${{ env.BINARY_NAME }}
        asset_name: ${{ env.BINARY_NAME }}-linux-x86_64
        asset_content_type: application/octet-stream

    # Step 8: Show release information
    - name: Show release info
      run: |
        echo "‚úÖ Release created successfully!"
        echo "üì¶ Project directory: ${{ env.PROJECT_DIR }}"
        echo "üè∑Ô∏è  Tag: ${{ steps.get_tag.outputs.TAG }}"
        echo "üìä Binary: ${{ env.BINARY_NAME }}"
        echo "üîó Release URL: ${{ steps.create_release.outputs.html_url }}"